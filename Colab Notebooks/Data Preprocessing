{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNeKQafEShuFTpvmKiP+tGA"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":[],"metadata":{"id":"LvaCJSA8cBzr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Frame sampling parameters\n","frames_per_video = 10\n","target_size = (1920, 1080)\n","\n","# Dataset multiplier\n","number_of_augmentations = 10\n","\n","# some global params\n","SIZE = (128, 128)\n","\n","# SIZE = (224, 224)\n","CHANNELS = 3\n","NBFRAME = 10\n","BS = 20\n","\n","NUM_THREADS = 8\n","\n","#preprocessing\n","LENGTH_TRIM = 100\n","classes_file = '/content/drive/MyDrive/VietNam SignLanguage/classes.npy'"],"metadata":{"id":"Lvyk0dXzb_d8"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"fuIYqlYzbnHd"},"outputs":[],"source":["# resize image by dsize = (128, 128)\n","def resizeImage(img, dsize):\n","  sizeImg = (img.shape[0],img.shape[1])\n","  if sizeImg != dsize and dsize != (None, None):\n","    img = cv2.resize(img,dsize)\n","  return img\n","\n","# remove left right background\n","def removeTrimBackground(img, length = 120):\n","  img = img[:,length:-1*length]\n","  return img\n","\n","def resizeScale(img, scale = 30):\n","  scale_percent = scale # percent of original size\n","  width = int(img.shape[1] * scale_percent / 100)\n","  height = int(img.shape[0] * scale_percent / 100)\n","  dim = (width, height)\n","\n","  # resize image\n","  resized = cv2.resize(img, dim, interpolation = cv2.INTER_AREA)\n","  return resized"]},{"cell_type":"code","source":["def preprocessingImg(img, dsize = (128,128)):\n","  # img = human_detection(img)\n","  img = removeTrimBackground(img, LENGTH_TRIM)\n","  img = resizeImage(img, dsize)\n","  return img"],"metadata":{"id":"iJfkQMsxb1Nz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def readFramesThread(sema, x_data, y_data, word, path, dsize):\n","  sema.acquire()\n","\n","  frames = os.listdir(path)\n","  lframes = []\n","\n","  for frame in frames: # read all frames in video\n","    frame_path = os.path.join(path, frame)\n","    img = cv2.imread(frame_path, 1)\n","    img = preprocessingImg(img, dsize)\n","    lframes.append(img)\n","\n","  x_data.append(lframes) # add video into list\n","  y_data.append(word) # add label\n","\n","  # time.sleep(0.2)\n","  sema.release()\n","\n","\n","def readDataThread(input_path, csv_file, dsize=(128,128), listWord = None):\n","  x_data = []\n","  y_data = []\n","\n","  maxthreads = NUM_THREADS\n","  sema = threading.Semaphore(value=maxthreads) # sema type\n","  threads = list()\n","\n","  with open(csv_file) as csvfile: # read path from csv\n","    reader = csv.reader(csvfile)\n","    print(reader)\n","    for row in reader:\n","      # video path\n","      video = row[0]\n","      word = video.split('/')[0]\n","\n","      if (listWord != None) and (word not in listWord): # decrease num classes\n","        continue\n","\n","      # print(video)\n","      path = os.path.join(input_path, video)\n","      # execute thread\n","      thread = threading.Thread( target=readFramesThread, args=(sema, x_data, y_data, word, path, dsize) )\n","      threads.append(thread)\n","      thread.start()\n","\n","    for t in threads: # for waiting all thread end\n","      t.join()\n","\n","  return x_data, y_data\n"],"metadata":{"id":"Ht7Rgwlub2sz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def readFrames(path, dsize):\n","  frames = os.listdir(path)\n","  lframes = []\n","\n","  for frame in frames: # read all frames in video\n","    frame_path = os.path.join(path, frame)\n","    img = cv2.imread(frame_path, 1)\n","    img = resizeImage(img, dsize)\n","    lframes.append(img)\n","\n","  return lframes\n","\n","def readData(input_path, csv_file, dsize=(128,128), listWord = None):\n","  x_data = []\n","  y_data = []\n","\n","  with open(csv_file) as csvfile: # read path from csv\n","    reader = csv.reader(csvfile)\n","    for row in reader:\n","      # video path\n","      video = row[0]\n","      word = video.split('/')[0]\n","      # if (listWord != None) and (word not in listWord): # decrease num classes\n","      #   continue\n","\n","      print(video)\n","      path = os.path.join(input_path, video)\n","      lframes = readFrames(path, dsize)\n","\n","      x_data.append(lframes) # add video into list\n","      y_data.append(word) # add label\n","\n","  return x_data, y_data\n",""],"metadata":{"id":"pMI9shEYb4VD"},"execution_count":null,"outputs":[]}]}